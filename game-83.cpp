#include <iostream>
#include <windows.h>
#include <conio.h>
#include <time.h>
#include <cmath>
#include <fstream>
#include <iomanip>
#include <string.h>
#include <stdexcept> 
#include <limits>

using namespace std;
////////////cursor hide/////////////////////
void cursor_hide()
{
    /*
        For Removing Blinking Cursor on Screen
    */
    HANDLE hStdOut = NULL;
    CONSOLE_CURSOR_INFO curInfo;

    hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    GetConsoleCursorInfo(hStdOut, &curInfo);
    curInfo.bVisible = FALSE;
    SetConsoleCursorInfo(hStdOut, &curInfo);
}
////////////////////////////////////////////////

/////////////////////////////////////gotoxy//////////////////////////////////////

void gotoxy(int x, int y)
{
    COORD coordinates;
    coordinates.X = x;
    coordinates.Y = y;
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordinates);
}
/////////////////////////////////////////////////////////////////////

/////////////////////////////getchar/////////////////////////////////
char getCharAtxy(short int x, short int y)
{
    CHAR_INFO ci;
    COORD xy = {0, 0};
    SMALL_RECT rect = {x, y, x, y};
    COORD coordBufSize;
    coordBufSize.X = 1;
    coordBufSize.Y = 1;
    return ReadConsoleOutput(GetStdHandle(STD_OUTPUT_HANDLE), &ci, coordBufSize, xy, &rect) ? ci.Char.AsciiChar
                                                                                            : ' ';
}
/////////////////////////////////////////////////////////
char c = 254;
char a = 166;
char b = 219;
char d = 222;
char e = 221;
///////////////////////////forcolors////////////////////////////////////
void setColor(short color)
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}
/////////////////////////////////////////////////////////////////////////
char lvl2[33][190]{
    {b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b}};

char maze[31][139] = {
    {b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {bb},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {bb},
    {bb},
    {bb},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {bb},
    {bb},
    {bb, b, b, b, b, ' ', b},
    {bb, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', b},
    {bb},
    {bb},
    {bb},
    {bb},
    {b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', b},
    {bb},
    {bb},
    {bb},
    {b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b}

};
char g = 178;
char tank[3][12] = {
    {b, b, b, b, b, b, b, b, b, b, b, '\0'},
    {' ', ' ', b, d, b, b, b, e, b, ' ', ' ', '\0'},
    {' ', ' ', ' ', ' ', d, '*', e, ' ', ' ', ' ', ' ', '\0'}};
char plane[3][7] = {
    {' ', ' ', '|', '\\', ' ', ' ', '\0'},
    {'-', ':', c, c, '>', ' ', '\0'},
    {' ', ' ', '|', '/', ' ', ' ', '\0'}};
char enemy[4][5] = {
    {'\\', '_', '_', '/', '\0'},
    {'{', a, a, '}', '\0'},
    {'/', '[', ']', '\\', '\0'},
    {' ', '1', '1', ' ', '\0'}};
char player[4][6] = {
    {' ', '.', '`', '.', '\0'},
    {'(', '0', ',', '0', ')', '\0'},
    {',', '{', c, '}', ',', '\0'},
    {'(', '_', ')', '_', ')', '\0'}};
char h = 220;
char heart[2][4] =
    {
        {g, h, g},
        {' ', b}};
void villianhealth(int vhealth, int x, int y);
void printmaze();
void printplayer(int px, int py);
void eraseplayer(int px, int py);
void printplane(int plx, int ply);
void eraseplane(int plx, int ply);
void moveplane(int plx, int &ply, char &directionforplane);
void fireplane(int &no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply);
void movebulletplane(int no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply, int &health);
void fireplane2(int &no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply);
void movebulletplane2(int no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply, int &health);

void printtank(int tx, int ty);
void erasetank(int tx, int ty);
void movetank(int &tx, int ty, char &directionfortank);
void movetank2(int &tx, int ty, char &directionfortank);
void firetank(int &noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty);
void movebullettank(int noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty, int &health);
void firetank2(int &noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty);
void movebullettank2(int noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty, int &health);

void printenemy(int ex, int ey);
void eraseenemy(int ex, int ey);
void moveenemy(int &ex, int ey, char &directionforenemy);
void fireenemy(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey);
void movebulletenemy(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health);
void fireenemyb(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey);
void fireenemy2(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey);
void movebulletenemy2(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health);
void fireenemyb2(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey);
void movebulletenemyb2(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health);

void movebulletenemyb(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health);
void moveplayerright(int &px, int py, int &health, int &i, int &hert, bool &sheild);
void moveplayerleft(int &px, int py, int &health, int &i, int &hert, bool &sheild);
void jumpplayer(int &px, int &py);
void jumpplayerback(int &px, int &py);
void fireplayer(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py);
void movebulletplayer(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health);
void fireplayerb(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py);
void movebulletplayerb(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health);
void fireplayer2(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py);
void movebulletplayer2(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health);
void fireplayerb2(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py);
void movebulletplayerb2(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health);
void ins();
string page();
void header();
void mainsc();
void healthvisual(int health, int x, int y);
void printhealth(int x, int y);
void maze2();
void loose();
void win();
void erasehealth(int x, int y);
void moveenemy2(int &ex, int ey, char &directionforenemy, int p, int q);
bool lvl1(int bulletplayerrow[],
          int p, int bulletplayercol[],
          bool bulletplayerexist[],
          int bullettankrow[],
          int bullettankcol[],
          bool bullettankexist[], int speedtank, int bullettank, char directionforenemy, int bulletenemyrow[],
          int bulletenemycol[], bool bulletenemyexist[], int speedenemy, int bulletenemy, char directionfortank, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[],
          int speedplane, int bulletplane, int &noo, int &n, int &no, int &resume2, int &resume3, int &resume4, int &vhealth,
          int health, int tx, int ty, int ex, int ey,
          int plx, int ply, char directionforplane,
          int py, int px, bool game);
void levl2(int e2x, int e2y, int t2x, int t2y, int e3x, int bulletplayerrow[],
           int p, int bulletplayercol[],
           bool bulletplayerexist[],
           int bullettankrow[],
           int bullettankcol[],
           bool bullettankexist[], int speedtank, int bullettank, char directionforenemy, int bulletenemyrow[],
           int bulletenemycol[], bool bulletenemyexist[], int speedenemy, int bulletenemy, char directionfortank, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[],
           int speedplane, int bulletplane, int &noo, int &n, int &no, int &resume2, int &resume3, int &resume4, int vhealth,
           int health, int tx, int ty, int ex, int ey,
           int plx, int ply, char directionforplane,
           int py, int px, bool &game, int e3y, int health1, int bulletenemy2,
           int bulletenemy1, int v1health,
           int v2health, char directionene1,
           char directionene2);
//////////////////////////////////////////////////////////////////////////////////
main()
{
    int bulletplayerrow[10000];
    int p = 0;
    int bulletplayercol[10000];
    bool bulletplayerexist[10000];
    int bullettankrow[10000];
    int bullettankcol[10000];
    bool bullettankexist[10000];
    int speedtank = 7;
    int bullettank = 0;
    char directionforenemy = 'L';
    int bulletenemyrow[10000];
    int bulletenemycol[10000];
    bool bulletenemyexist[10000];
    int speedenemy = 2;
    int bulletenemy = 0;
    char directionfortank = 'L';
    int bulletplanerow[10000];
    int bulletplanecol[10000];
    bool bulletplaneexist[10000];
    int speedplane = 8;
    int bulletplane = 0;
    int noo = 0;
    int n = 0;
    int no = 0;

    int resume2 = 0;
    int resume3 = 0;
    int resume4 = 0;
    int vhealth = 10;

    int health = 4;

    int tx = 5; // column for tank
    int ty = 1; // row for tank

    int ex = 15; // column for tank
    int ey = 9;  // row for tank

    int plx = 2;                  // column for plane
    int ply = 1;                  // row for plane
    char directionforplane = 'd'; /// direction for plane
    int py = 26;                  // rows for player
    int px = 30;
    bool resume = false;
    // columns for player
    //////////for lvl2

    int e2x = 2;
    int e2y = 28;
    int t2x = 122;
    int t2y = 1;
    int e3x = 122;
    int e3y = 28;
    int health1 = 4;
    int bulletenemy2 = 0;
    int bulletenemy1 = 0;
    int v1health = 10;
    int v2health = 11;
    char directionene1 = 'L';
    char directionene2 = 'L';
    bool game = false;
    mainsc();
    while (1)
    {

        string opt = page();
        if (opt == "1")
        {
            
           
                if (vhealth != 0)
                {     system("cls");
                printmaze();
                printplayer(px, py);
                printplane(plx, ply);
                printtank(tx, ty);
                printenemy(ex, ey);
                    game = lvl1(bulletplayerrow,
                                p, bulletplayercol,
                                bulletplayerexist,
                                bullettankrow,
                                bullettankcol,
                                bullettankexist, speedtank, bullettank, directionforenemy, bulletenemyrow,
                                bulletenemycol, bulletenemyexist, speedenemy, bulletenemy, directionfortank, bulletplanerow, bulletplanecol, bulletplaneexist,
                                speedplane, bulletplane, noo, n, no, resume2, resume3, resume4, vhealth,
                                health, tx, ty, ex, ey,
                                plx, ply, directionforplane,
                                py, px, game);
                                setColor(7); 
                }
                if (vhealth == 0)
                {setColor(7);
                    system("cls");
                    maze2();
                    printplayer(px, py);
                    printenemy(e2x, e2y);
                    printenemy(e3x, e3y);
                    printtank(t2x, t2y);
                    printplane(px, py);
                    levl2(e2x, e2y, t2x, t2y, e3x, bulletplayerrow,
                          p, bulletplayercol,
                          bulletplayerexist,
                          bullettankrow,
                          bullettankcol,
                          bullettankexist, speedtank, bullettank, directionforenemy, bulletenemyrow,
                          bulletenemycol, bulletenemyexist, speedenemy, bulletenemy, directionfortank, bulletplanerow, bulletplanecol, bulletplaneexist,
                          speedplane, bulletplane, noo, n, no, resume2, resume3, resume4, vhealth,
                          health, tx, ty, ex, ey,
                          plx, ply, directionforplane,
                          py, px, game, e3y, health1, bulletenemy2,
                          bulletenemy1, v1health,
                          v2health, directionene1,
                          directionene2); setColor(7); 
                } setColor(7);
            
        }

        if (opt == "2")
        {
            system("cls");
            ins();
        }
        if (opt == "3")
        {
            system("pause");
            return 0;
        }
    }
}
void levl2(int e2x, int e2y, int t2x, int t2y, int e3x, int bulletplayerrow[],
           int p, int bulletplayercol[],
           bool bulletplayerexist[],
           int bullettankrow[],
           int bullettankcol[],
           bool bullettankexist[], int speedtank, int bullettank, char directionforenemy, int bulletenemyrow[],
           int bulletenemycol[], bool bulletenemyexist[], int speedenemy, int bulletenemy, char directionfortank, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[],
           int speedplane, int bulletplane, int &noo, int &n, int &no, int &resume2, int &resume3, int &resume4, int vhealth,
           int health, int tx, int ty, int ex, int ey,
           int plx, int ply, char directionforplane,
           int py, int px, bool &game, int e3y, int health1, int bulletenemy2,
           int bulletenemy1, int v1health,
           int v2health, char directionene1,
           char directionene2)
{
    int hert = 0;
    int i = 0;
    bool sheild = false;
    while (1)
    {
        healthvisual(health1, 89, 36);
        villianhealth(v1health, 193, 3);
        villianhealth(v2health, 193, 15);
        moveplane(plx, ply, directionforplane);
        movetank2(t2x, t2y, directionfortank);
        moveenemy2(e2x, e2y, directionene1, 75, 2);
        moveenemy2(e3x, e3y, directionene2, 177, 117);
        if (GetAsyncKeyState(VK_RIGHT))
        {
            moveplayerright(px, py, health1, i, hert, sheild);
        }
        if (GetAsyncKeyState(VK_LEFT))
        {
            moveplayerleft(px, py, health1, i, hert, sheild);
        }
        if (GetAsyncKeyState(VK_UP))
        {
            jumpplayer(px, py);
        }
        if (GetAsyncKeyState(VK_DOWN))
        {
            jumpplayerback(px, py);
        }
        if (GetAsyncKeyState(VK_SPACE))
        {
            fireplayer2(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py);
        }
        if (GetAsyncKeyState(VK_RETURN))
        {
            fireplayerb2(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py);
        }
        while ((getCharAtxy(px, py + 4) != b &&
                getCharAtxy(px + 1, py + 4) != b &&
                getCharAtxy(px + 2, py + 4) != b &&
                getCharAtxy(px + 3, py + 4) != b &&
                getCharAtxy(px + 4, py + 4) != b) &&
               (getCharAtxy(px, py + 4) != '#' &&
                getCharAtxy(px + 1, py + 4) != '#' &&
                getCharAtxy(px + 2, py + 4) != '#' &&
                getCharAtxy(px + 3, py + 4) != '#' &&
                getCharAtxy(px + 4, py + 4) != '#'))
        {
            eraseplayer(px, py);
            py++;
            printplayer(px, py);
        }
        if (px < 110)
        {
            movebulletplayer2(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py, v1health);
            movebulletplayerb2(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py, v1health);
        }
        else if (px > 110)
        {
            movebulletplayer2(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py, v2health);
            movebulletplayerb2(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py, v2health);
        }
        movebulletenemy2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e2x, e2y, health1);
        movebulletenemyb2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e2x, e2y, health1);
        movebulletenemy2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e3x, e3y, health1);
        movebulletenemyb2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e3x, e3y, health1);

        movebullettank2(noo, bullettankrow, bullettankcol, bullettankexist, t2x, t2y, health1);
        movebulletplane2(no, bulletplanerow, bulletplanecol, bulletplaneexist, plx, ply, health1);
        bullettank++;
        bulletplane++;
        bulletenemy1++;
        bulletenemy2++;
        if (sheild == false)
        {
            if (bulletplane > speedplane)
            {
                fireplane2(no, bulletplanerow, bulletplanecol, bulletplaneexist, plx, ply);
                bulletplane = 0;
            }
            Sleep(70);

            if (bullettank > speedtank)
            {
                firetank2(noo, bullettankrow, bullettankcol, bullettankexist, t2x, t2y);
                bullettank = 0;
            }
            if (bulletenemy1 > speedenemy)
            {
                if (getCharAtxy(e2x + 15, e2y + 1) == '(' || getCharAtxy(e2x + 14, e2y + 1) == '(' || getCharAtxy(e2x + 13, e2y + 1) == '(' || getCharAtxy(e2x + 12, e2y + 1) == '(' || getCharAtxy(e2x + 11, e2y + 1) == '(' || getCharAtxy(e2x + 10, e2y + 1) == '(' || getCharAtxy(e2x + 9, e2y + 1) == '(' || getCharAtxy(e2x + 8, e2y + 1) == '(' || getCharAtxy(e2x + 7, e2y + 1) == '(' || getCharAtxy(e2x + 6, e2y + 1) == '(' || getCharAtxy(e2x + 5, e2y + 1) == '(' || getCharAtxy(e2x + 4, e2y + 1) == '(')
                {
                    fireenemy2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e2x, e2y);
                }
                else if (getCharAtxy(e2x - 15, e2y + 1) == '(' || getCharAtxy(e2x - 14, e2y + 1) == '(' || getCharAtxy(e2x - 13, e2y + 1) == '(' || getCharAtxy(e2x - 12, e2y + 1) == '(' || getCharAtxy(e2x - 3, e2y + 1) == '(' || getCharAtxy(e2x - 11, e2y + 1) == '(' || getCharAtxy(e2x - 2, e2y + 1) == '(' || getCharAtxy(e2x - 10, e2y + 1) == '(' || getCharAtxy(e2x - 9, e2y + 1) == '(' || getCharAtxy(e2x - 8, e2y + 1) == '(' || getCharAtxy(e2x - 7, e2y + 1) == '(' || getCharAtxy(e2x - 6, e2y + 1) == '(' || getCharAtxy(e2x - 5, e2y + 1) == '(' || getCharAtxy(e2x - 4, e2y + 1) == '(')
                {
                    fireenemyb2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e2x, e2y);
                }
                bulletenemy1 = 0;
            }
            if (bulletenemy2 > speedenemy)
            {
                if (getCharAtxy(e3x + 15, e3y + 1) == '(' || getCharAtxy(e3x + 14, e3y + 1) == '(' || getCharAtxy(e3x + 13, e3y + 1) == '(' || getCharAtxy(e3x + 12, e3y + 1) == '(' || getCharAtxy(e3x + 11, e3y + 1) == '(' || getCharAtxy(e3x + 10, e3y + 1) == '(' || getCharAtxy(e3x + 9, e3y + 1) == '(' || getCharAtxy(e3x + 8, e3y + 1) == '(' || getCharAtxy(e3x + 7, e3y + 1) == '(' || getCharAtxy(e3x + 6, e3y + 1) == '(' || getCharAtxy(e3x + 5, e3y + 1) == '(' || getCharAtxy(e3x + 4, e3y + 1) == '(')
                {
                    fireenemy2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e3x, e3y);
                }
                else if (getCharAtxy(e3x - 15, e3y + 1) == '(' || getCharAtxy(e3x - 14, e3y + 1) == '(' || getCharAtxy(e3x - 13, e3y + 1) == '(' || getCharAtxy(e3x - 12, e3y + 1) == '(' || getCharAtxy(e3x - 3, e3y + 1) == '(' || getCharAtxy(e3x - 11, e3y + 1) == '(' || getCharAtxy(e3x - 2, e3y + 1) == '(' || getCharAtxy(e3x - 10, e3y + 1) == '(' || getCharAtxy(e3x - 9, e3y + 1) == '(' || getCharAtxy(e3x - 8, e3y + 1) == '(' || getCharAtxy(e3x - 7, e3y + 1) == '(' || getCharAtxy(e3x - 6, e3y + 1) == '(' || getCharAtxy(e3x - 5, e3y + 1) == '(' || getCharAtxy(e3x - 4, e3y + 1) == '(')
                {
                    fireenemyb2(n, bulletenemyrow, bulletenemycol, bulletenemyexist, e3x, e3y);
                }
                bulletenemy2 = 0;
            }
            hert++;
        }
        if (hert == 80)
        {
            setColor(188);
            printhealth(110, 26);
            setColor(176);
        }

        if (hert == 40)
        {
            gotoxy(105, 26);
            cout << "()";
        }
        if (sheild == true)
        {
            Sleep(70);
            i++;
            if (i - 100 == hert)
            {
                sheild = false;
            }
        }
        if (health1 == 0)
        {
            setColor(7);
            loose();
            Sleep(5000);
        
            setColor(7);
            break;
        }
        if (v1health == 0 && v2health == 0)
        {
            setColor(7);
            win();
            Sleep(5000);
            game = false;
return ;
            setColor(7);
        }
    }
}
bool lvl1(int bulletplayerrow[],
          int p, int bulletplayercol[],
          bool bulletplayerexist[],
          int bullettankrow[],
          int bullettankcol[],
          bool bullettankexist[], int speedtank, int bullettank, char directionforenemy, int bulletenemyrow[],
          int bulletenemycol[], bool bulletenemyexist[], int speedenemy, int bulletenemy, char directionfortank, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[],
          int speedplane, int bulletplane, int &noo, int &n, int &no, int &resume2, int &resume3, int &resume4, int &vhealth,
          int health, int tx, int ty, int ex, int ey,
          int plx, int ply, char directionforplane,
          int py, int px, bool game)
{ vhealth = 10;
    int hert = 0;
    int i = 0;
    bool sheild = false;
    while (1)
    {

        if (GetAsyncKeyState(VK_RIGHT))
        {
            moveplayerright(px, py, health, i, hert, sheild);
        }
        if (GetAsyncKeyState(VK_LEFT))
        {
            moveplayerleft(px, py, health, i, hert, sheild);
        }
        if (GetAsyncKeyState(VK_UP))
        {
            jumpplayer(px, py);
        }
        if (GetAsyncKeyState(VK_DOWN))
        {
            jumpplayerback(px, py);
        }
        if (GetAsyncKeyState(VK_SPACE))
        {
            fireplayer(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py);
        }
        if (GetAsyncKeyState(VK_RETURN))
        {
            fireplayerb(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py);
        }
        while ((getCharAtxy(px, py + 4) != b &&
                getCharAtxy(px + 1, py + 4) != b &&
                getCharAtxy(px + 2, py + 4) != b &&
                getCharAtxy(px + 3, py + 4) != b &&
                getCharAtxy(px + 4, py + 4) != b) &&
               (getCharAtxy(px, py + 4) != '#' &&
                getCharAtxy(px + 1, py + 4) != '#' &&
                getCharAtxy(px + 2, py + 4) != '#' &&
                getCharAtxy(px + 3, py + 4) != '#' &&
                getCharAtxy(px + 4, py + 4) != '#'))
        {
            eraseplayer(px, py);
            py++;
            printplayer(px, py);
        }
        bullettank++;
        bulletplane++;
        bulletenemy++;
        moveplane(plx, ply, directionforplane);
        movetank(tx, ty, directionfortank);
        moveenemy(ex, ey, directionforenemy);
        if (sheild == false)
        {
            if (bulletplane > speedplane)
            {
                fireplane(no, bulletplanerow, bulletplanecol, bulletplaneexist, plx, ply);
                bulletplane = 0;
            }
            if (bullettank > speedtank)
            {
                firetank(noo, bullettankrow, bullettankcol, bullettankexist, tx, ty);
                bullettank = 0;
            }
            if (bulletenemy > speedenemy)
            {
                if (getCharAtxy(ex + 15, ey + 1) == '(' || getCharAtxy(ex + 14, ey + 1) == '(' || getCharAtxy(ex + 13, ey + 1) == '(' || getCharAtxy(ex + 12, ey + 1) == '(' || getCharAtxy(ex + 11, ey + 1) == '(' || getCharAtxy(ex + 10, ey + 1) == '(' || getCharAtxy(ex + 9, ey + 1) == '(' || getCharAtxy(ex + 8, ey + 1) == '(' || getCharAtxy(ex + 7, ey + 1) == '(' || getCharAtxy(ex + 6, ey + 1) == '(' || getCharAtxy(ex + 5, ey + 1) == '(' || getCharAtxy(ex + 4, ey + 1) == '(')
                {
                    fireenemy(n, bulletenemyrow, bulletenemycol, bulletenemyexist, ex, ey);
                }
                else if (getCharAtxy(ex - 15, ey + 1) == '(' || getCharAtxy(ex - 14, ey + 1) == '(' || getCharAtxy(ex - 13, ey + 1) == '(' || getCharAtxy(ex - 12, ey + 1) == '(' || getCharAtxy(ex - 3, ey + 1) == '(' || getCharAtxy(ex - 11, ey + 1) == '(' || getCharAtxy(ex - 2, ey + 1) == '(' || getCharAtxy(ex - 10, ey + 1) == '(' || getCharAtxy(ex - 9, ey + 1) == '(' || getCharAtxy(ex - 8, ey + 1) == '(' || getCharAtxy(ex - 7, ey + 1) == '(' || getCharAtxy(ex - 6, ey + 1) == '(' || getCharAtxy(ex - 5, ey + 1) == '(' || getCharAtxy(ex - 4, ey + 1) == '(')
                {
                    fireenemyb(n, bulletenemyrow, bulletenemycol, bulletenemyexist, ex, ey);
                }
                bulletenemy = 0;
            }

            movebulletenemy(n, bulletenemyrow, bulletenemycol, bulletenemyexist, ex, ey, health);
            movebulletenemyb(n, bulletenemyrow, bulletenemycol, bulletenemyexist, ex, ey, health);
            movebullettank(noo, bullettankrow, bullettankcol, bullettankexist, tx, ty, health);
            movebulletplane(no, bulletplanerow, bulletplanecol, bulletplaneexist, plx, ply, health);
            hert++;
        }
        movebulletplayer(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py, vhealth);
        movebulletplayerb(p, bulletplayerrow, bulletplayercol, bulletplayerexist, px, py, vhealth);

        if (hert == 250)
        {
            setColor(188);
            printhealth(13, 28);
            setColor(176);
        }

        if (hert == 400)
        {
            gotoxy(33, 28);
            cout << "()";
        }
        if (sheild == true)
        {
            i++;
            if (i - 100 == hert)
            {
                sheild = false;
            }
        }
        villianhealth(vhealth, 144, 4);
        healthvisual(health, 3, 32);
        if (health == 0)
        {
            setColor(7);
            loose();
            Sleep(5000);
       
            setColor(7);
            break;
        }
        if (vhealth == 0)
        {
            setColor(7);
            win();
            Sleep(5000);
            game = true;
            setColor(7);
            return game;
        }
        Sleep(70);
    }
}

//////////////////////////

void printmaze() ////maze
{
    setColor(184);
    for (int i = 0; i < 31; i++)
    {
        if (i >= 30)
        {
            setColor(186);
        }

        for (int j = 0; j < 139; j++)
        {
            cout << maze[i][j];
        }
        cout << endl;
    }
    setColor(176);
}

/////player
void printplayer(int px, int py)
{
    int x = px;
    int y = py;
    for (int i = 0; i < 4; i++)
    {
        gotoxy(x, y);
        for (int j = 0; j < 5; j++)
        {

            cout << player[i][j];
        }
        y++;
    }
}
void eraseplayer(int px, int py)
{
    int x = px;
    int y = py;
    for (int i = 0; i < 4; i++)
    {
        gotoxy(x, y);

        for (int j = 0; j < 5; j++)
        {
            if (player[i][j] == ' ')
            {
                continue;
            }

            cout << " ";
        }
        y++;
    }
}
void moveplayerright(int &px, int py, int &health, int &i, int &hert, bool &sheild)
{
    char front = getCharAtxy(px + 5, py);
    char front1 = getCharAtxy(px + 5, py + 1);
    char front2 = getCharAtxy(px + 5, py + 2);
    char front3 = getCharAtxy(px + 5, py + 3);
    if (front == ' ' && front1 == ' ' && front3 == ' ' && front2 == ' ')
    {
        eraseplayer(px, py);
        px = px + 1;
        printplayer(px, py);
    }
    else if (front3 == g || front == g || front1 == g || front2 == g)
    {
        health++;
        erasehealth(13, 28);
        erasehealth(110, 26);
    }
    else if (front3 == ')' || front2 == ')' || front3 == '(' || front2 == '(')
    {
        eraseplayer(px, py);
        px = px + 1;
        printplayer(px, py);
        sheild = true;
        i = hert;
    }
}
void moveplayerleft(int &px, int py, int &health, int &i, int &hert, bool &sheild)
{
    char front = getCharAtxy(px - 1, py);
    char front1 = getCharAtxy(px - 1, py + 1);
    char front2 = getCharAtxy(px - 1, py + 2);
    char front3 = getCharAtxy(px - 1, py + 3);
    if (front == ' ' && front1 == ' ' && front3 == ' ' && front2 == ' ')
    {
        eraseplayer(px, py);
        px = px - 1;
        printplayer(px, py);
    }
    else if (front3 == g || front2 == g || front == g || front1 == g)
    {
        health++;
        erasehealth(13, 28);
        erasehealth(110, 26);
    }
    else if (front3 == ')' || front2 == ')' || front3 == '(' || front2 == '(')
    {
        eraseplayer(px, py);
        px = px - 1;
        printplayer(px, py);
        sheild = true;
        i = hert;
    }
}
void jumpplayerback(int &px, int &py)
{
    int i = 0;

    while (i < 7)
    {
        if (getCharAtxy(px + 4, py) == ' ' &&
            getCharAtxy(px + 5, py + 1) == ' ' &&
            getCharAtxy(px + 5, py + 2) == ' ' &&
            getCharAtxy(px + 5, py + 3) == ' ' &&
            getCharAtxy(px - 2, py) == ' ' &&
            getCharAtxy(px - 1, py + 1) == ' ' &&
            getCharAtxy(px - 1, py + 2) == ' ' &&
            getCharAtxy(px - 1, py + 3) == ' ' &&
            getCharAtxy(px, py - 1) == ' ' &&
            getCharAtxy(px + 1, py - 1) == ' ' &&
            getCharAtxy(px + 2, py - 1) == ' ' &&
            getCharAtxy(px + 3, py - 1) == ' ' &&
            getCharAtxy(px + 4, py - 1) == ' ')
        {
            eraseplayer(px, py);
            py--;
            px--;
            printplayer(px, py);
        }
        else
        {
            break;
        }
        i++;
    }
    i = 0;
    while (i < 7)
    {
        if (getCharAtxy(px + 4, py) == ' ' &&
            getCharAtxy(px + 5, py + 1) == ' ' &&
            getCharAtxy(px + 5, py + 2) == ' ' &&
            getCharAtxy(px + 5, py + 3) == ' ' &&
            getCharAtxy(px - 2, py) == ' ' &&
            getCharAtxy(px - 1, py + 1) == ' ' &&
            getCharAtxy(px - 1, py + 2) == ' ' &&
            getCharAtxy(px - 1, py + 3) == ' ' &&
            getCharAtxy(px, py + 4) == ' ' &&
            getCharAtxy(px + 1, py + 4) == ' ' &&
            getCharAtxy(px + 2, py + 4) == ' ' &&
            getCharAtxy(px + 3, py + 4) == ' ' &&
            getCharAtxy(px + 4, py + 4) == ' ' && getCharAtxy(px + 5, py + 4) == ' ')
        {
            eraseplayer(px, py);
            py++;
            px--;
            printplayer(px, py);
        }
        else
        {
            break;
        }
    }
    i++;
}

void fireplayer(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py)
{
    gotoxy(px + 5, py + 2);
    cout << '*';
    bulletplayerrow[p] = py + 2;
    bulletplayercol[p] = px + 5;
    bulletplayerexist[p] = true;

    // Ensure array bounds before updating the maze
    if (bulletplayerrow[p] >= 0 && bulletplayerrow[p] < 31 && bulletplayercol[p] >= 0 && bulletplayercol[p] < 139)
    {
        maze[bulletplayerrow[p]][bulletplayercol[p]] = '*';
    }

    p++;
}

void movebulletplayer(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health)
{
    for (int i = 0; i < p; i++)
    {
        if (bulletplayerexist[i] == true && maze[bulletplayerrow[i]][bulletplayercol[i]] == '*')
        {

            gotoxy(bulletplayercol[i], bulletplayerrow[i]);
            cout << ' ';
            maze[bulletplayerrow[i]][bulletplayercol[i]] = ' ';
            bulletplayercol[i]++;
            if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == ' ')
            {
                gotoxy(bulletplayercol[i], bulletplayerrow[i]);
                cout << '*';
                maze[bulletplayerrow[i]][bulletplayercol[i]] = '*';
            }
            else if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '/' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '{' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '\\' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '1')
            {
                health--;
                bulletplayerexist[i] = false;
            }
            else
            {
                bulletplayerexist[i] = false;
            }
        }
    }
}

void fireplayerb(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py)
{
    gotoxy(px - 1, py + 2);
    cout << '=';
    bulletplayerrow[p] = py + 2;
    bulletplayercol[p] = px - 1;
    bulletplayerexist[p] = true;

    // Ensure array bounds before updating the maze
    if (bulletplayerrow[p] >= 0 && bulletplayerrow[p] < 31 && bulletplayercol[p] >= 0 && bulletplayercol[p] < 139)
    {
        maze[bulletplayerrow[p]][bulletplayercol[p]] = '=';
    }

    p++;
}

void movebulletplayerb(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health)
{
    for (int i = 0; i < p; i++)
    {
        if (bulletplayerexist[i] == true && maze[bulletplayerrow[i]][bulletplayercol[i]] == '=')
        {
            gotoxy(bulletplayercol[i], bulletplayerrow[i]);
            cout << ' ';
            maze[bulletplayerrow[i]][bulletplayercol[i]] = ' ';
            bulletplayercol[i]--;
            if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == ' ')
            {
                gotoxy(bulletplayercol[i], bulletplayerrow[i]);
                cout << '=';
                maze[bulletplayerrow[i]][bulletplayercol[i]] = '=';
            }
            else if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '/' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '{' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '\\' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '1')
            {
                health--;
                bulletplayerexist[i] = false;
            }
            else
            {
                bulletplayerexist[i] = false;
            }
        }
    }
}
void jumpplayer(int &px, int &py)
{
    int i = 0;

    while (i < 7)
    {
        if (getCharAtxy(px + 5, py) == ' ' &&
            getCharAtxy(px + 5, py + 1) == ' ' &&
            getCharAtxy(px + 5, py + 2) == ' ' &&
            getCharAtxy(px + 5, py + 3) == ' ' &&
            getCharAtxy(px - 1, py) == ' ' &&
            getCharAtxy(px - 1, py + 1) == ' ' &&
            getCharAtxy(px - 1, py + 2) == ' ' &&
            getCharAtxy(px - 1, py + 3) == ' ' &&
            getCharAtxy(px, py - 1) == ' ' &&
            getCharAtxy(px + 1, py - 1) == ' ' &&
            getCharAtxy(px + 2, py - 1) == ' ' &&
            getCharAtxy(px + 3, py - 1) == ' ' &&
            getCharAtxy(px + 4, py - 1) == ' ')
        {
            eraseplayer(px, py);
            py--;
            px++;
            printplayer(px, py);
        }
        else
        {
            break;
        }
        i++;
    }
    i = 0;
    while (i < 7)
    {
        if (getCharAtxy(px + 5, py) == ' ' &&
            getCharAtxy(px + 5, py + 1) == ' ' &&
            getCharAtxy(px + 5, py + 2) == ' ' &&
            getCharAtxy(px + 5, py + 3) == ' ' &&
            getCharAtxy(px - 1, py) == ' ' &&
            getCharAtxy(px - 1, py + 1) == ' ' &&
            getCharAtxy(px - 1, py + 2) == ' ' &&
            getCharAtxy(px - 1, py + 3) == ' ' &&
            getCharAtxy(px, py + 4) == ' ' &&
            getCharAtxy(px + 1, py + 4) == ' ' &&
            getCharAtxy(px + 2, py + 4) == ' ' &&
            getCharAtxy(px + 3, py + 4) == ' ' &&
            getCharAtxy(px + 4, py + 4) == ' ')
        {
            eraseplayer(px, py);
            py++;
            px++;
            printplayer(px, py);
        }
        else
        {
            break;
        }
    }
    i++;
}
///////////////////////
/////////////////plane
void printplane(int plx, int ply)
{
    int x = plx;
    int y = ply;
    setColor(183);
    for (int i = 0; i < 3; i++)
    {
        gotoxy(x, y);
        for (int j = 0; j < 7; j++)
        {

            cout << plane[i][j];
        }
        y++;
    }
    setColor(176);
}
void eraseplane(int plx, int ply)
{
    int x = plx;
    int y = ply;
    for (int i = 0; i < 3; i++)
    {
        gotoxy(x, y);
        for (int j = 0; j < 7; j++)
        {

            cout << " ";
        }
        y++;
    }
}
void moveplane(int plx, int &ply, char &directionforplane)
{
    if (directionforplane == 'd' && ply < 27)
    {
        eraseplane(plx, ply);
        ply++;
        printplane(plx, ply);
    }
    if (ply == 27)
    {
        directionforplane = 'u';
    }
    if (directionforplane == 'u' && ply > 1)
    {
        eraseplane(plx, ply);
        ply--;
        printplane(plx, ply);
    }
    if (ply == 1)
    {
        directionforplane = 'd';
    }
}

void fireplane(int &no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply)
{
    gotoxy(plx + 6, ply + 1);
    cout << '-';
    bulletplanerow[no] = ply + 1;
    bulletplanecol[no] = plx + 6;
    bulletplaneexist[no] = true;

    // Ensure array bounds before updating the maze
    if (bulletplanerow[no] >= 0 && bulletplanerow[no] < 31 && bulletplanecol[no] >= 0 && bulletplanecol[no] < 139)
    {
        maze[bulletplanerow[no]][bulletplanecol[no]] = '-';
    }

    no++;
}

void movebulletplane(int no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply, int &health)
{
    for (int i = 0; i < no; i++)
    {
        if (bulletplaneexist[i] == true && maze[bulletplanerow[i]][bulletplanecol[i]] == '-')
        {
            gotoxy(bulletplanecol[i], bulletplanerow[i]);
            cout << ' ';
            maze[bulletplanerow[i]][bulletplanecol[i]] = ' ';
            bulletplanecol[i]++;
            if (getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == ' ')
            {
                gotoxy(bulletplanecol[i], bulletplanerow[i]);
                cout << '-';
                maze[bulletplanerow[i]][bulletplanecol[i]] = '-';
            }
            else if (getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == '`' || getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == '(' || getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == ',' || getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == '.')
            {
                health--;
                bulletplaneexist[i] = false;
            }
            else
            {
                bulletplaneexist[i] = false;
            }
        }
    }
}
///////////////////////////////

//////health case
int prevHealth = -1;
void healthvisual(int health, int x, int y)
{
    if (health == prevHealth)
    {
        return;
    }

    setColor(12);
    int maxHealth = 10; // Maximum health value

    // Clear the entire health bar
    for (int i = 0; i < maxHealth; i++)
    {
        erasehealth(x, y);
        x += 6; // Increment x by 6
    }

    // Reset x to its initial value
    x -= 6 * maxHealth;

    for (int i = 0; i < health; i++)
    {
        printhealth(x, y);
        x += 6; // Increment x by 6
    }
    setColor(176);

    prevHealth = health;
}

void printhealth(int x, int y)
{
    for (int j = 0; j < 2; j++)
    {
        gotoxy(x, y);
        for (int k = 0; k < 4; k++)
        {
            cout << heart[j][k];
        }
        y++;
    }
}
void erasehealth(int x, int y)
{
    for (int j = 0; j < 2; j++)
    {
        gotoxy(x, y);
        for (int k = 0; k < 4; k++)
        {
            cout << " ";
        }
        y++;
    }
}
int prevhealth = -1;
void villianhealth(int vhealth, int x, int y)
{
    if (vhealth == 11)
    {
        vhealth--;
    }
    if (vhealth == prevhealth)
    {
        return;
    }

    setColor(8);
    int maxhealth = 12;

    // Clear the entire health bar
    for (int i = 0; i < maxhealth; i++)
    {
        gotoxy(x, y);
        cout << " ";
        y += 1;
    }

    // Reset y to its initial value
    y -= maxhealth;

    for (int i = 0; i < vhealth; i++)
    {
        gotoxy(x, y);
        cout << b;
        y += 1;
    }
    setColor(176);

    prevhealth = vhealth;
}

//////////////tank

void printtank(int tx, int ty)
{
    int x = tx;
    int y = ty;
    setColor(184);
    for (int i = 0; i < 3; i++)
    {
        gotoxy(x, y);
        for (int j = 0; j < 12; j++)
        {

            cout << tank[i][j];
        }
        y++;
    }
    setColor(176);
}
void erasetank(int tx, int ty)
{
    int x = tx;
    int y = ty;
    for (int i = 0; i < 3; i++)
    {
        gotoxy(x, y);
        for (int j = 0; j < 12; j++)
        {

            cout << " ";
        }
        y++;
    }
}
void movetank(int &tx, int ty, char &directionfortank)
{
    if (directionfortank == 'L' && tx < 125)
    {
        erasetank(tx, ty);
        tx++;
        printtank(tx, ty);
    }
    if (tx == 125)
    {
        directionfortank = 'r';
    }
    if (directionfortank == 'r' && tx > 2)
    {
        erasetank(tx, ty);
        tx--;
        printtank(tx, ty);
    }
    if (tx == 2)
    {
        directionfortank = 'L';
    }
}

void firetank(int &noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty)
{
    gotoxy(tx + 6, ty + 3);
    cout << '*';
    bullettankrow[noo] = ty + 3;
    bullettankcol[noo] = tx + 6;
    bullettankexist[noo] = true;

    // Ensure array bounds before updating the maze
    if (bullettankrow[noo] >= 0 && bullettankrow[noo] < 31 && bullettankcol[noo] >= 0 && bullettankcol[noo] < 139)
    {
        maze[bullettankrow[noo]][bullettankcol[noo]] = '*';
    }

    noo++;
}

void movebullettank(int noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty, int &health)
{
    for (int i = 0; i < noo; i++)
    {
        if (bullettankexist[i] == true && maze[bullettankrow[i]][bullettankcol[i]] == '*')
        {
            gotoxy(bullettankcol[i], bullettankrow[i]);
            cout << ' ';
            maze[bullettankrow[i]][bullettankcol[i]] = ' ';
            bullettankrow[i]++;
            if (getCharAtxy(bullettankcol[i], bullettankrow[i]) == ' ')
            {
                gotoxy(bullettankcol[i], bullettankrow[i]);
                cout << '*';
                maze[bullettankrow[i]][bullettankcol[i]] = '*';
            }
            else if (getCharAtxy(bullettankcol[i], bullettankrow[i]) == '.' || getCharAtxy(bullettankcol[i], bullettankrow[i]) == '(' || getCharAtxy(bullettankcol[i], bullettankrow[i]) == ')' || getCharAtxy(bullettankcol[i], bullettankrow[i]) == '`')
            {
                health--;
                bullettankexist[i] = false;
            }
            else
            {
                bullettankexist[i] = false;
            }
        }
    }
}
///////////////////////////////

//////////////enemy
void printenemy(int ex, int ey)
{
    int x = ex;
    int y = ey;
    for (int i = 0; i < 4; i++)
    {
        gotoxy(x, y);
        for (int j = 0; j < 5; j++)
        {

            cout << enemy[i][j];
        }
        y++;
    }
}
void eraseenemy(int ex, int ey)
{
    int x = ex;
    int y = ey;
    for (int i = 0; i < 4; i++)
    {
        gotoxy(x, y);
        for (int j = 0; j < 5; j++)
        {

            cout << " ";
        }
        y++;
    }
}
void moveenemy(int &ex, int ey, char &directionforenemy)
{
    char front = getCharAtxy(ex + 6, ey);
    char front1 = getCharAtxy(ex + 6, ey + 1);
    char front2 = getCharAtxy(ex + 6, ey + 2);
    char front3 = getCharAtxy(ex + 6, ey + 3);
    char front4 = getCharAtxy(ex - 2, ey);
    char front5 = getCharAtxy(ex - 2, ey + 1);
    char front6 = getCharAtxy(ex - 2, ey + 2);
    char front7 = getCharAtxy(ex - 2, ey + 3);
    if (front == ',' || front1 == ',' || front2 == ',' || front3 == ',')
    {
        if (directionforenemy == 'L')
        {
            directionforenemy = 'r';
        }
    }
    if (front4 == ',' || front5 == ',' || front6 == ',' || front7 == ',')
    {
        if (directionforenemy == 'r')
        {
            directionforenemy = 'L';
        }
    }
    if (directionforenemy == 'L' && ex < 36)
    {
        eraseenemy(ex, ey);
        ex++;
        printenemy(ex, ey);
    }
    if (ex == 36)
    {
        directionforenemy = 'r';
    }
    if (directionforenemy == 'r' && ex > 15)
    {
        eraseenemy(ex, ey);
        ex--;
        printenemy(ex, ey);
    }
    if (ex == 15)
    {
        directionforenemy = 'L';
    }
}
void fireenemy(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey)
{
    gotoxy(ex + 5, ey + 2);
    cout << ':';
    bulletenemyrow[n] = ey + 2;
    bulletenemycol[n] = ex + 5;
    bulletenemyexist[n] = true;

    // Ensure array bounds before updating the maze
    if (bulletenemyrow[n] >= 0 && bulletenemyrow[n] < 31 && bulletenemycol[n] >= 0 && bulletenemycol[n] < 139)
    {
        maze[bulletenemyrow[n]][bulletenemycol[n]] = ':';
    }

    n++;
}

void movebulletenemy(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health)
{
    for (int i = 0; i < n; i++)
    {
        if (bulletenemyexist[i] == true && maze[bulletenemyrow[i]][bulletenemycol[i]] == ':')
        {
            gotoxy(bulletenemycol[i], bulletenemyrow[i]);
            cout << ' ';
            maze[bulletenemyrow[i]][bulletenemycol[i]] = ' ';
            bulletenemycol[i]++;
            if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ' ')
            {
                gotoxy(bulletenemycol[i], bulletenemyrow[i]);
                cout << ':';
                maze[bulletenemyrow[i]][bulletenemycol[i]] = ':';
            }
            else if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ',' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '.' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '(' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ')' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '`')
            {
                health--;
                bulletenemyexist[i] = false;
            }
            else
            {
                bulletenemyexist[i] = false;
            }
        }
    }
}
void fireenemyb(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey)
{
    gotoxy(ex - 1, ey + 2);
    cout << ';';
    bulletenemyrow[n] = ey + 2;
    bulletenemycol[n] = ex - 1;
    bulletenemyexist[n] = true;

    // Ensure array bounds before updating the maze
    if (bulletenemyrow[n] >= 0 && bulletenemyrow[n] < 31 && bulletenemycol[n] >= 0 && bulletenemycol[n] < 139)
    {
        maze[bulletenemyrow[n]][bulletenemycol[n]] = ';';
    }

    n++;
}

void movebulletenemyb(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health)
{
    for (int i = 0; i < n; i++)
    {
        if (bulletenemyexist[i] == true && maze[bulletenemyrow[i]][bulletenemycol[i]] == ';')
        {
            gotoxy(bulletenemycol[i], bulletenemyrow[i]);
            cout << ' ';
            maze[bulletenemyrow[i]][bulletenemycol[i]] = ' ';
            bulletenemycol[i]--;
            if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ' ')
            {
                gotoxy(bulletenemycol[i], bulletenemyrow[i]);
                cout << ';';
                maze[bulletenemyrow[i]][bulletenemycol[i]] = ';';
            }
            else if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ',' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '.' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '(' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ')' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '`')
            {
                health--;
                bulletenemyexist[i] = false;
            }
            else
            {
                bulletenemyexist[i] = false;
            }
        }
    }
}

///////////////////////////////
void mainsc()
{

    system("cls");
    setColor(1);
    gotoxy(1, 1);
    std::cout << R"(
                                                                                                                 
  /###           /      ##### ##            ##### ##         #####    ##         ##### /    ##        ##### /## 
 /  ############/    ######  /### /      ######  /###     ######  /  #### /   ######  /  #####     ######  / ## 
/     ##########    /#   /  / ###/      /#   /  /  ###   /#   /  /   ####/   /#   /  /     #####  /#   /  /  ## 
#             /    /    /  /   ##      /    /  /    ### /    /  /    # #    /    /  ##     # ##  /    /  /   ## 
 ##          /         /  /                /  /      ##     /  /     #          /  ###     #         /  /    /  
            /         ## ##               ## ##      ##    ## ##     #         ##   ##     #        ## ##   /   
           /          ## ##               ## ##      ##    ## ##     #         ##   ##     #        ## ##  /    
          /           ## ######         /### ##      /     ## ########         ##   ##     #        ## ###/     
         /            ## #####         / ### ##     /      ## ##     #         ##   ##     #        ## ##  ###  
        /             ## ##               ## ######/       ## ##     ##        ##   ##     #        ## ##    ## 
       /              #  ##               ## ######        #  ##     ##         ##  ##     #        #  ##    ## 
      /                  /                ## ##               /       ##         ## #      #           /     ## 
  /##/           /   /##/         /       ## ##           /##/        ##          ###      #       /##/      ###
 /  ############/   /  ##########/        ## ##          /  #####      ##          #########      /  ####    ## 
/     ##########   /     ######      ##   ## ##         /     ##                     #### ###    /    ##     #  
                   #                ###   #  /          #                                  ###   #              
                    ##               ###    /            ##                    ########     ###   ##            
                                      #####/                                 /############  /#                  
                                        ###                                 /           ###/        )";
    gotoxy(1, 55);
    setColor(7);
    cout << R"(            
                                                                                                              
  /###           /         ##                ##### ##            ##### ##         ##### ##         ##### /##  
 /  ############/       /####             ######  /###        ######  /###     ######  /### /   ######  / ##  
/     ##########       /  ###            /#   /  /  ###      /#   /  /  ###   /#   /  / ###/   /#   /  /  ##  
#             /           /##           /    /  /    ###    /    /  /    ### /    /  /   ##   /    /  /   ##  
 ##          /           /  ##              /  /      ##        /  /      ##     /  /             /  /    /   
            /            /  ##             ## ##      ##       ## ##      ##    ## ##            ## ##   /    
           /            /    ##            ## ##      ##       ## ##      ##    ## ##            ## ##  /     
          /             /    ##          /### ##      /      /### ##      /     ## ######        ## ###/      
         /             /      ##        / ### ##     /      / ### ##     /      ## #####         ## ##  ###   
        /              /########           ## ######/          ## ######/       ## ##            ## ##    ##  
       /              /        ##          ## ######           ## ######        #  ##            #  ##    ##  
      /               #        ##          ## ##               ## ##               /                /     ##  
  /##/           /   /####      ##         ## ##               ## ##           /##/         /   /##/      ### 
 /  ############/   /   ####    ## /       ## ##               ## ##          /  ##########/   /  ####    ##  
/     ##########   /     ##      #/   ##   ## ##          ##   ## ##         /     ######     /    ##     #   
                   #                 ###   #  /          ###   #  /          #                #               
                    ##                ###    /            ###    /            ##               ##             
                                       #####/              #####/                                             
                                         ###                 ###                                              

         )";
    int z = 100;
    for (int i = 0; i < 25; i++)
    {
        gotoxy(z, 42); // Adjust the y-coordinate as needed
        setColor(1);
        cout << char(219); // Use char(219) instead of b for a solid block
        z += 1;

        int y = 3;

        gotoxy(125, y);
        setColor(8);
        cout << "                         ....               \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "                  .:-=++*****";
        setColor(7);
        cout << "##*+-          \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "               .:=======++++***";
        setColor(7);
        cout << "##%%+.       \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "             .-=-----=====+++***";
        setColor(7);
        cout << "##%%%-      \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "           .----------====+++***";
        setColor(7);
        cout << "###%%%=     \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "          :---:::-----====+++***";
        setColor(7);
        cout << "###%%%%-    \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "         .---::::--:--===+++****";
        setColor(7);
        cout << "####%";
        setColor(1);
        cout << "@@%.   \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "         :----:::--::===++++****";
        setColor(7);
        cout << "#%";
        setColor(1);
        cout << "@@@@@@*   \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "         -=";
        setColor(1);
        cout << "*#*";
        setColor(7);
        cout << "-:-----===+++*";
        setColor(7);
        cout << "#%%";
        setColor(1);
        cout << "@@@@@@@@@@.  \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "         :+";
        setColor(1);
        cout << "@##%+";
        setColor(7);
        cout << "----=====";
        setColor(7);
        cout << "#%";
        setColor(1);
        cout << "@@@@@@@@@@@@@@:  \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "          =";
        setColor(1);
        cout << "##**@+";
        setColor(7);
        cout << "========";
        setColor(7);
        cout << "%";
        setColor(1);
        cout << "@@@@@@@@@@@@@@@.  \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "           =";
        setColor(1);
        cout << "*%%@*";
        setColor(7);
        cout << "======++";
        setColor(7);
        cout << "#";
        setColor(1);
        cout << "@@@@@@@@@@@%";
        setColor(7);
        cout << "#@#   \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "            =++++++=+=++++";
        setColor(1);
        cout << "@@@@@@@@@@";
        setColor(7);
        cout << "%%%#.   \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "         :-===++++++++++**";
        setColor(1);
        cout << "%@@%";
        setColor(7);
        cout << "###@@@#%+     \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "        .+---==+++++++****";
        setColor(7);
        cout << "%%%*%%*%%@@*:::.  \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "       -#%#+=====++++*****";
        setColor(7);
        cout << "%@###%@@@@@%####+ \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "     .-==+#++==---=+*****#";
        setColor(7);
        cout << "@@@%*+=+###**+*#%#\n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "    :--==+- ==-===-==+**#%";
        setColor(7);
        cout << "%%%      :**#*+%%%\n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "   -****+= .+=----:-==+**#";
        setColor(7);
        cout << "#%%:   =+*#*++*%@=\n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "  =+++=    =======-===++*";
        setColor(7);
        cout << "##%%-   -+*#####*  \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "  :***===--=-=++**===*#***";
        setColor(7);
        cout << "%%%     :=+##*-   \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "    ...++++++++*#+==-+*+*";
        setColor(7);
        cout << "#%%-               \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "        :=*****%@++++*";
        setColor(7);
        cout << "##%%%:                \n";
        y++;
        gotoxy(125, y);
        setColor(8);
        cout << "           ..:*%%#***";
        setColor(7);
        cout << "#%#%%%                 \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "            *@%######%%%%%#+=               \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "           :@@@########%#@@@@-              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "           ++*#*:--=====.+%%%*              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          .++*#+         +**##              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          :#*##:         =**##              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          =@@@*=         *%%@#.             \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         :=*##%=         =%%%%:             \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         ++***##=       .+**##%*            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         +***###-       -***##%%.           \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         .***##+         +**####            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         .*####*          *#%%%-            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "        .++++*##         :+**##=            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "       .+++++*#=         +++**#*            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "       .*****##         -+++**#=            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "        :====-          -##*###.            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "                                           \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "                                            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "                                            \n";
        y++;
        Sleep(300);

        y = 3;
        gotoxy(125, y);
        setColor(7);
        cout << "                ...:::::::..                    \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "            .:----------------:..               \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         .-------==++++++++=----::.             \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "       :=*";
        setColor(1);
        cout << "##%%%%%%%%%@@@@@%%%";
        setColor(7);
        cout << "#=::::::.          \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "     .+";
        setColor(1);
        cout << "%%%%%%%%%%@@%%%%%%%%%%%";
        setColor(7);
        cout << "7*-..  -";
        setColor(1);
        cout << "+=.        \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "    :+";
        setColor(1);
        cout << "%%%%####%%%%%%%##***###%##";
        setColor(7);
        cout << "+-:.::";
        setColor(1);
        cout << "-::       \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "  .+-";
        setColor(1);
        cout << "%%#";
        setColor(7);
        cout << "*+=--=*";
        setColor(1);
        cout << "##%%##";
        setColor(7);
        cout << "+-:..:-+";
        setColor(1);
        cout << "##%#";
        setColor(7);
        cout << "=--";
        setColor(1);
        cout << "-+*+=       \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "  =:=";
        setColor(1);
        cout << "%#";
        setColor(7);
        cout << "*:.....:";
        setColor(1);
        cout << "+####";
        setColor(7);
        cout << "+........*";
        setColor(1);
        cout << "#%%";
        setColor(7);
        cout << "+=-";
        setColor(1);
        cout << "-+%%#:      \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "  =:=";
        setColor(1);
        cout << "%#+";
        setColor(7);
        cout << ".......";
        setColor(1);
        cout << "+####";
        setColor(7);
        cout << "*:....:-";
        setColor(1);
        cout << "=*#%%";
        setColor(7);
        cout << "*===";
        setColor(1);
        cout << "*@%%=      \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "  =:=";
        setColor(1);
        cout << "%%#";
        setColor(7);
        cout << "*+=--=*";
        setColor(1);
        cout << "##%%%##";
        setColor(7);
        cout << "*++**";
        setColor(1);
        cout << "##%%%%+";
        setColor(7);
        cout << "===";
        setColor(1);
        cout << "+@%#=      \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "  .-:#";
        setColor(1);
        cout << "%%%#####%%%%%%%%%%%%%%%%%%#";
        setColor(7);
        cout << "*++==";
        setColor(1);
        cout << "*%.       \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "    .:*";
        setColor(1);
        cout << "%%%%%%%%%@@@@@@@@@@@@%%#";
        setColor(7);
        cout << "****++==         \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "     .:-+";
        setColor(1);
        cout << "#%%@@@@@@@@@@@@%%##*";
        setColor(7);
        cout << "++++++++=          \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "       :::-==+*********++++++++++++=:           \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         .:--------=======++++++=:.             \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "             .:::--==++===--:.                  \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "            :.    .*=##:..    ::                \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          -#%+:::::---==+++=#%#%*.              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          =#*-....:--===++=+%#*%*-              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         :=:  ....:--==++++++. .:=-             \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "        :=-    .::---=+++++=.    :--            \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "      :+*=.     .:---=++++-       -+=.          \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "      -*+=.      :---=++=-       .+%%=:         \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "     .:==:       :#-#%##*:        :++=:         \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "    .:===.     =-:=+***+---:       .---:        \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "    .-++.     :#+::-----=+###:     .:-==-       \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "   :+##-      :=-.:----===:++:      :-===:      \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "   .=*=.     .-=-  ..:::.  :--       -+#%-      \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "   :-+=      .-+-          .--.       -++=:     \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "   -=*=.    :*#%#.        .-==-     -**-==-     \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "    :=++    -=+**=.       *+%%#:   .- :++=.     \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "     ===+  ..:-==-:      .:==+=-.  +- .#*.      \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "     .=-   ..--=--:      ..--==-:  -..*+        \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "           .:--=--:     ..:-===-:  :-=+.        \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "           ::--==-:.    .::-=++=-   -:          \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          .::--===-.    .::-=+++=.              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          :++++*+=-:    :::--=+++:              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "          ::-===++=:   .+++++++*+-              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         ..:=+++*#=    :--=++**+=-              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "         .-+*##+-      .:-=++=++=.              \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "                       ---=++=-:                \n";
        y++;
        gotoxy(125, y);
        setColor(7);
        cout << "                        :-=--                   \n";
        y++;

        Sleep(300);
    }
}
void header()
{
    setColor(1);
    gotoxy(1, 1);
    std::cout << R"(
                                                                                                                 
SSSSSSSSSs.                                                                SSSSSSSSSs.                                                             
SSSSSSSSSSS .sSSSSs.    .sSSSSs.    .sSSS SSSSS .sSSS SSSSS .sSSSSSSSs.    SSSSSSSSSSS .sSSSSs.    .sSSSSs.    .sSSSSs.    .sSSSSs.    .sSSSSSSSs. 
     S SSS  S SSSSSSSs. S SSSSSSSs. S SSS SSSSS S SSS SSSSS S SSS SSSSS         S SSS  S SSSSSSSs. S SSSSSSSs. S SSSSSSSs. S SSSSSSSs. S SSS SSSSS 
    S  SS   S  SS SSSS' S  SS SSSSS S  SS SSSSS S  SS SSSSS S  SS SSSS'        S  SS   S  SS SSSSS S  SS SSSSS S  SS SSSSS S  SS SSSS' S  SS SSSS' 
   S..SS    S..SS       S..SS SSSSS S..SSsSSSSS `..SSsSSSS' S..SSsSSSa.       S..SS    S..SSsSSSSS S..SS SSSSS S..SS SSSSS S..SS       S..SSsSSSa. 
  S:::S     S:::SSSS    S:::SsSSSSS S:::S SSSSS    S:::S    S:::S SSSSS      S:::S     S:::S SSSSS S:::SsSSSSS S:::SsSSSSS S:::SSSS    S:::S SSSSS 
 S;;;S      S;;;S       S;;;S       S;;;S SSSSS    S;;;S    S;;;S SSSSS     S;;;S      S;;;S SSSSS S;;;S       S;;;S       S;;;S       S;;;S SSSSS 
S%%%SSSSSSS S%%%S SSSSS S%%%S       S%%%S SSSSS    S%%%S    S%%%S SSSSS    S%%%SSSSSSS S%%%S SSSSS S%%%S       S%%%S       S%%%S SSSSS S%%%S SSSSS 
SSSSSSSSSSS SSSSSsSS;:' SSSSS       SSSSS SSSSS    SSSSS    SSSSS SSSSS    SSSSSSSSSSS SSSSS SSSSS SSSSS       SSSSS       SSSSSsSS;:' SSSSS SSSSS 
                                                                                                                                                   
                                         

         )";

    int y = 1;

    gotoxy(148, y);
    setColor(7);
    cout << "                          ...::::..                \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                  .-==+*++====--===++**==-:        \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                =+-.  =+==============+  .:=*.     \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "               -*    ";
    setColor(1);
    cout << ".:--==+++++++===-:.";
    setColor(7);
    cout << "    :*     \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "               #: :";
    setColor(1);
    cout << "+###";
    setColor(7);
    cout << "****";
    setColor(1);
    cout << "+++++++";
    setColor(7);
    cout << "****";
    setColor(1);
    cout << "###*- ";
    setColor(7);
    cout << "  #.    \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "            ++*%  ";
    setColor(1);
    cout << "%#+++++++++++++++++++++*%-";
    setColor(7);
    cout << "  ++-.  \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "            %:=# :";
    setColor(1);
    cout << "%*++++";
    setColor(7);
    cout << "..:";
    setColor(1);
    cout << "+++++++=";
    setColor(7);
    cout << "..:";
    setColor(1);
    cout << "++++#* ";
    setColor(7);
    cout << " =*-%  \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "   .++-    ";
    setColor(7);
    cout << " %:=# =";
    setColor(1);
    cout << "%++++";
    setColor(7);
    cout << "=  .";
    setColor(1);
    cout << "+++++++";
    setColor(7);
    cout << "=  .";
    setColor(1);
    cout << "++++## ";
    setColor(7);
    cout << " =*:%. \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << " =+**=+* :=.";
    setColor(7);
    cout << "*=-%.=";
    setColor(1);
    cout << "%****+";
    setColor(7);
    cout << "..:";
    setColor(1);
    cout << "+++++++";
    setColor(7);
    cout << "=..:";
    setColor(1);
    cout << "+***## ";
    setColor(7);
    cout << " ++:%  \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << ":%+++%*++%=#-";
    setColor(7);
    cout << "*+%=-";
    setColor(1);
    cout << "%********";
    setColor(7);
    cout << "*=+++=+";
    setColor(1);
    cout << "********#+";
    setColor(7);
    cout << " .%:++  \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "%-**#-...=%#= ";
    setColor(7);
    cout << " .#.+";
    setColor(1);
    cout << "##*******";
    setColor(7);
    cout << "*++++";
    setColor(1);
    cout << "*******##*";
    setColor(7);
    cout << " .+*==   \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << " -+#+...*+ ";
    setColor(7);
    cout << ".=+=:+*..-+*";
    setColor(1);
    cout << "#####*****#####*";
    setColor(7);
    cout << " +=:.=*      \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "    =+++%.";
    setColor(7);
    cout << "    .:-##*+=-:..:---==--::.:-=+**%+:     \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "       .-*-.     #-=#:-=*#+++++++++*%+=:-%:*+=*-   \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "          :++-...*-++  ";
    setColor(1);
    cout << "..+++++++++++-.";
    setColor(7);
    cout << "   .%:*+  =*  \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "             :=++#+*+  ";
    setColor(1);
    cout << "  :==========. ";
    setColor(7);
    cout << "    %=%-   =+ \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                 .:*+   ";
    setColor(1);
    cout << " %:........+= ";
    setColor(7);
    cout << "    %=#-.   % \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                   -*   ";
    setColor(1);
    cout << " #:........+- ";
    setColor(7);
    cout << "   .% .%.   #:\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                   :#   ";
    setColor(1);
    cout << " ==........#. ";
    setColor(7);
    cout << "   :%-";
    setColor(1);
    cout << "+%+++-%.\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    %.  ";
    setColor(1);
    cout << " .#:......=*   ";
    setColor(7);
    cout << "  =%";
    setColor(1);
    cout << "#%-...-% \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    #*+=:..";
    setColor(1);
    cout << "=======-";
    setColor(7);
    cout << " .:-++#+";
    setColor(1);
    cout << "%+-:...#:\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    *- .-=++*#=+#+++=-. *=";
    setColor(1);
    cout << "%+%*##*%.\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    +=   ...++  %:..    #. ";
    setColor(1);
    cout << ":=+**+: \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                    +*--:...%.  ++..::--%.         \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                   *+----=*#*   .%*+=--:-*=        \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                  +*:::::---%   -*---::::-%.       \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                   :::::::::.    ::::::::::        \n";
    y++;
}
string page()
{

    system("cls");
    header();

    int y = 14;

    setColor(1);
    y++;
    gotoxy(3, y);
    cout << ".::::::::.................\n";
    y++;
    gotoxy(3, y);
    cout << "-1. _ _______ _ _  _    - \n";
    y++;
    gotoxy(3, y);
    cout << "=  | '_ \\ / _` | || |   =\n";
    y++;
    gotoxy(3, y);
    cout << "-  | .__/ \\__,_|\\_, |   -\n";
    y++;
    gotoxy(3, y);
    cout << "=  |_|  |_|      |_/    =\n";
    y++;
    gotoxy(3, y);
    cout << ".----::::::::-----------:.\n";

    setColor(1);
    y = 14;
    y++;
    gotoxy(35, y);
    cout << ".::::::::.......................\n";
    y++;
    gotoxy(35, y);
    cout << "-2.           _           _    =\n";
    y++;
    gotoxy(35, y);
    cout << "-  __ ___ _ _| |_ _ _ ___| |___-\n";
    y++;
    gotoxy(35, y);
    cout << "= / _/ _ \\ ' \\  _| '_/ _ \\ (_-<=\n";
    y++;
    gotoxy(35, y);
    cout << "- \\__\\___/_||_\\__|_| \\___/_/__/-\n";
    y++;
    gotoxy(35, y);
    cout << ".----::::::::------------------:.\n";

    setColor(7);
    y = 21;
    y++;
    gotoxy(20, y);
    cout << ".::::::::.........\n";
    y++;
    gotoxy(20, y);
    cout << "-3._____ _ ()||_ -\n";
    y++;
    gotoxy(20, y);
    cout << "= / -_) \\ /||| _|=\n";
    y++;
    gotoxy(20, y);
    cout << "- \\___/_\\_\\||\\__|-\n";
    y++;
    gotoxy(20, y);
    cout << ".----::::::::-----:.\n";

    string opt;
    gotoxy(20, 28);
    cout << "ENTER YOUR OPTION NO: ";
     while (true) {
        gotoxy(40, 28);
        if (cin >> opt) {
            break;  // Break out of the loop if successful input
        } else {
            // Clear the error state and the buffer
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid input. Please enter again: ";
        }
    }return opt;
}
void ins()
{

    setColor(1);
    gotoxy(1, 1);
    std::cout << R"(
                                                                                                                 
SSSSSSSSSs.                                                                SSSSSSSSSs.                                                             
SSSSSSSSSSS .sSSSSs.    .sSSSSs.    .sSSS SSSSS .sSSS SSSSS .sSSSSSSSs.    SSSSSSSSSSS .sSSSSs.    .sSSSSs.    .sSSSSs.    .sSSSSs.    .sSSSSSSSs. 
     S SSS  S SSSSSSSs. S SSSSSSSs. S SSS SSSSS S SSS SSSSS S SSS SSSSS         S SSS  S SSSSSSSs. S SSSSSSSs. S SSSSSSSs. S SSSSSSSs. S SSS SSSSS 
    S  SS   S  SS SSSS' S  SS SSSSS S  SS SSSSS S  SS SSSSS S  SS SSSS'        S  SS   S  SS SSSSS S  SS SSSSS S  SS SSSSS S  SS SSSS' S  SS SSSS' 
   S..SS    S..SS       S..SS SSSSS S..SSsSSSSS `..SSsSSSS' S..SSsSSSa.       S..SS    S..SSsSSSSS S..SS SSSSS S..SS SSSSS S..SS       S..SSsSSSa. 
  S:::S     S:::SSSS    S:::SsSSSSS S:::S SSSSS    S:::S    S:::S SSSSS      S:::S     S:::S SSSSS S:::SsSSSSS S:::SsSSSSS S:::SSSS    S:::S SSSSS 
 S;;;S      S;;;S       S;;;S       S;;;S SSSSS    S;;;S    S;;;S SSSSS     S;;;S      S;;;S SSSSS S;;;S       S;;;S       S;;;S       S;;;S SSSSS 
S%%%SSSSSSS S%%%S SSSSS S%%%S       S%%%S SSSSS    S%%%S    S%%%S SSSSS    S%%%SSSSSSS S%%%S SSSSS S%%%S       S%%%S       S%%%S SSSSS S%%%S SSSSS 
SSSSSSSSSSS SSSSSsSS;:' SSSSS       SSSSS SSSSS    SSSSS    SSSSS SSSSS    SSSSSSSSSSS SSSSS SSSSS SSSSS       SSSSS       SSSSSsSS;:' SSSSS SSSSS 
                                                                                                                                                   
                                         

         )";

    int y = 1;

    gotoxy(148, y);
    setColor(7);
    cout << "                          ...::::..                \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                  .-==+*++====--===++**==-:        \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                =+-.  =+==============+  .:=*.     \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "               -*    ";
    setColor(1);
    cout << ".:--==+++++++===-:.";
    setColor(7);
    cout << "    :*     \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "               #: :";
    setColor(1);
    cout << "+###";
    setColor(7);
    cout << "****";
    setColor(1);
    cout << "+++++++";
    setColor(7);
    cout << "****";
    setColor(1);
    cout << "###*- ";
    setColor(7);
    cout << "  #.    \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "            ++*%  ";
    setColor(1);
    cout << "%#+++++++++++++++++++++*%-";
    setColor(7);
    cout << "  ++-.  \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "            %:=# :";
    setColor(1);
    cout << "%*++++";
    setColor(7);
    cout << "..:";
    setColor(1);
    cout << "+++++++=";
    setColor(7);
    cout << "..:";
    setColor(1);
    cout << "++++#* ";
    setColor(7);
    cout << " =*-%  \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "   .++-    ";
    setColor(7);
    cout << " %:=# =";
    setColor(1);
    cout << "%++++";
    setColor(7);
    cout << "=  .";
    setColor(1);
    cout << "+++++++";
    setColor(7);
    cout << "=  .";
    setColor(1);
    cout << "++++## ";
    setColor(7);
    cout << " =*:%. \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << " =+**=+* :=.";
    setColor(7);
    cout << "*=-%.=";
    setColor(1);
    cout << "%****+";
    setColor(7);
    cout << "..:";
    setColor(1);
    cout << "+++++++";
    setColor(7);
    cout << "=..:";
    setColor(1);
    cout << "+***## ";
    setColor(7);
    cout << " ++:%  \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << ":%+++%*++%=#-";
    setColor(7);
    cout << "*+%=-";
    setColor(1);
    cout << "%********";
    setColor(7);
    cout << "*=+++=+";
    setColor(1);
    cout << "********#+";
    setColor(7);
    cout << " .%:++  \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "%-**#-...=%#= ";
    setColor(7);
    cout << " .#.+";
    setColor(1);
    cout << "##*******";
    setColor(7);
    cout << "*++++";
    setColor(1);
    cout << "*******##*";
    setColor(7);
    cout << " .+*==   \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << " -+#+...*+ ";
    setColor(7);
    cout << ".=+=:+*..-+*";
    setColor(1);
    cout << "#####*****#####*";
    setColor(7);
    cout << " +=:.=*      \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "    =+++%.";
    setColor(7);
    cout << "    .:-##*+=-:..:---==--::.:-=+**%+:     \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "       .-*-.     #-=#:-=*#+++++++++*%+=:-%:*+=*-   \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "          :++-...*-++  ";
    setColor(1);
    cout << "..+++++++++++-.";
    setColor(7);
    cout << "   .%:*+  =*  \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "             :=++#+*+  ";
    setColor(1);
    cout << "  :==========. ";
    setColor(7);
    cout << "    %=%-   =+ \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                 .:*+   ";
    setColor(1);
    cout << " %:........+= ";
    setColor(7);
    cout << "    %=#-.   % \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                   -*   ";
    setColor(1);
    cout << " #:........+- ";
    setColor(7);
    cout << "   .% .%.   #:\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                   :#   ";
    setColor(1);
    cout << " ==........#. ";
    setColor(7);
    cout << "   :%-";
    setColor(1);
    cout << "+%+++-%.\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    %.  ";
    setColor(1);
    cout << " .#:......=*   ";
    setColor(7);
    cout << "  =%";
    setColor(1);
    cout << "#%-...-% \n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    #*+=:..";
    setColor(1);
    cout << "=======-";
    setColor(7);
    cout << " .:-++#+";
    setColor(1);
    cout << "%+-:...#:\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    *- .-=++*#=+#+++=-. *=";
    setColor(1);
    cout << "%+%*##*%.\n";
    y++;
    gotoxy(148, y);
    setColor(7);
    cout << "                    +=   ...++  %:..    #. ";
    setColor(1);
    cout << ":=+**+: \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                    +*--:...%.  ++..::--%.         \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                   *+----=*#*   .%*+=--:-*=        \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                  +*:::::---%   -*---::::-%.       \n";
    y++;
    gotoxy(148, y);
    setColor(1);
    cout << "                   :::::::::.    ::::::::::        \n";
    y++;

#define RESET "\033[0m"
#define RED "\033[31m"
#define GREEN "\033[32m"
#define YELLOW "\033[33m"
#define BLUE "\033[34m"
#define CYAN "\033[36m"
#define BOLD "\033[1m"
    gotoxy(0, 14);
    cout << RESET << R"(
                                                .........                    
                                               .         ::  THIS KEY FOR JUMPING FORWARD                 
                                               .    /\   ::                   
                                               .   ====  ::                   
                                               .    ||   ::                   
                                               :::::.::::::                    
                                    ..........  .........:  ..........        
 THIS KEY FOR MOVING BACKWARD      .:        ::...       ::..       ::  THIS KEY FOR MOVING FORWARD      
                                   .:  .'|_  ::..  _||_  ::..  _|'. ::       
                                   .: '.  _  ::..  \  /  ::..  _  .'::       
                                   .:   \|   ::..   \/   ::..   |/  ::       
                                    :::::::::-  :::::::::-  :::::::::-        
                                                
                                                THIS KEY FOR JUMPING BACKWARD
PRESS ANY KEY TO PROCEED:)
)";
    cout << BLUE;
    cout << R"(
..........................................................................................
:                                                                                        :
:                                                                               SPACE BAR: THIS FOR SHOOTING IN FRONT
--::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-:

.........................
:                       :
:                 RETURN: THIS FOR SHOOTING BACKWARD
--:::::::::::::::::::::-:

)";
    gotoxy(105, 18);
    cout << RED << char(219) << char(220) << char(219) << endl;
    gotoxy(105, 19);
    cout << " " << char(219) << "  THIS INDICATES PLAYER HEALTH" << endl;
    setColor(8);
    y = 18;
    for (int i = 0; i < 10; i++)
    {
        gotoxy(102, y);
        cout << char(219);
        if (i == 3)
        {
            gotoxy(104, y);
            cout << "THIS INDICATES ENEMY HEALTH";
        }
        cout << endl;
        y++;
    }
    y = 36;
    gotoxy(70, y + 1);
    cout << "THIS IS ENEMY U HAVE TO DEFEAT";
    gotoxy(100, y);
    cout << "\\__/" << endl;
    y++;
    gotoxy(100, y);
    cout << "{" << char(166) << char(166) << "}" << endl;
    y++;
    gotoxy(100, y);
    cout << "/[]\\" << endl;
    y++;
    gotoxy(100, y);
    cout << " 11" << endl;
    y++;
    y = 36;
    gotoxy(105, y);
    cout << " .`." << endl;
    y++;
    gotoxy(105, y);
    cout << "(0,0)" << endl;
    y++;
    gotoxy(105, y);
    cout << ",{" << char(254) << "}," << endl;
    y++;
    gotoxy(105, y);
    cout << "(_)_)" << endl;
    ;
    gotoxy(110, y);
    cout << "THIS IS PLAYER";
    getch();
}

void maze2()
{
    setColor(184);
    for (int i = 0; i < 33; i++)
    {
        for (int j = 0; j < 190; j++)
        {
            cout << lvl2[i][j];
        }
        cout << endl;
    }
    setColor(176);
}
void movetank2(int &tx, int ty, char &directionfortank)
{
    if (directionfortank == 'L' && tx < 177)
    {
        erasetank(tx, ty);
        tx++;
        printtank(tx, ty);
    }
    if (tx == 177)
    {
        directionfortank = 'r';
    }
    if (directionfortank == 'r' && tx > 117)
    {
        erasetank(tx, ty);
        tx--;
        printtank(tx, ty);
    }
    if (tx == 117)
    {
        directionfortank = 'L';
    }
}

void moveenemy2(int &ex, int ey, char &directionforenemy, int p, int q)
{
    char front = getCharAtxy(ex + 6, ey);
    char front1 = getCharAtxy(ex + 6, ey + 1);
    char front2 = getCharAtxy(ex + 6, ey + 2);
    char front3 = getCharAtxy(ex + 6, ey + 3);
    char front4 = getCharAtxy(ex - 2, ey);
    char front5 = getCharAtxy(ex - 2, ey + 1);
    char front6 = getCharAtxy(ex - 2, ey + 2);
    char front7 = getCharAtxy(ex - 2, ey + 3);
    if (front == ',' || front1 == ',' || front2 == ',' || front3 == ',')
    {
        if (directionforenemy == 'L')
        {
            directionforenemy = 'r';
        }
    }
    if (front4 == ',' || front5 == ',' || front6 == ',' || front7 == ',')
    {
        if (directionforenemy == 'r')
        {
            directionforenemy = 'L';
        }
    }
    if (directionforenemy == 'L' && ex < p)
    {
        eraseenemy(ex, ey);
        ex++;
        printenemy(ex, ey);
    }
    if (ex == p)
    {
        directionforenemy = 'r';
    }
    if (directionforenemy == 'r' && ex > q)
    {
        eraseenemy(ex, ey);
        ex--;
        printenemy(ex, ey);
    }
    if (ex == q)
    {
        directionforenemy = 'L';
    }
}
void fireplane2(int &no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply)
{
    gotoxy(plx + 6, ply + 1);
    cout << '-';
    bulletplanerow[no] = ply + 1;
    bulletplanecol[no] = plx + 6;
    bulletplaneexist[no] = true;

    // Ensure array bounds before updating the maze
    if (bulletplanerow[no] >= 0 && bulletplanerow[no] < 31 && bulletplanecol[no] >= 0 && bulletplanecol[no] < 139)
    {
        lvl2[bulletplanerow[no]][bulletplanecol[no]] = '-';
    }

    no++;
}

void movebulletplane2(int no, int bulletplanerow[], int bulletplanecol[], bool bulletplaneexist[], int plx, int ply, int &health)
{
    for (int i = 0; i < no; i++)
    {
        if (bulletplaneexist[i] == true && lvl2[bulletplanerow[i]][bulletplanecol[i]] == '-')
        {
            gotoxy(bulletplanecol[i], bulletplanerow[i]);
            cout << ' ';
            lvl2[bulletplanerow[i]][bulletplanecol[i]] = ' ';
            bulletplanecol[i]++;
            if (getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == ' ')
            {
                gotoxy(bulletplanecol[i], bulletplanerow[i]);
                cout << '-';
                lvl2[bulletplanerow[i]][bulletplanecol[i]] = '-';
            }
            else if (getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == '`' || getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == '(' || getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == ',' || getCharAtxy(bulletplanecol[i], bulletplanerow[i]) == '.')
            {
                health--;
                bulletplaneexist[i] = false;
            }
            else
            {
                bulletplaneexist[i] = false;
            }
        }
    }
}

void fireplayer2(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py)
{
    gotoxy(px + 5, py + 2);
    cout << '*';
    bulletplayerrow[p] = py + 2;
    bulletplayercol[p] = px + 5;
    bulletplayerexist[p] = true;

    // Ensure array bounds before updating the maze
    if (bulletplayerrow[p] >= 0 && bulletplayerrow[p] < 33 && bulletplayercol[p] >= 0 && bulletplayercol[p] < 190)
    {
        lvl2[bulletplayerrow[p]][bulletplayercol[p]] = '*';
    }

    p++;
}

void movebulletplayer2(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health)
{
    for (int i = 0; i < p; i++)
    {
        if (bulletplayerexist[i] == true && lvl2[bulletplayerrow[i]][bulletplayercol[i]] == '*')
        {

            gotoxy(bulletplayercol[i], bulletplayerrow[i]);
            cout << ' ';
            lvl2[bulletplayerrow[i]][bulletplayercol[i]] = ' ';
            bulletplayercol[i]++;
            if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == ' ')
            {
                gotoxy(bulletplayercol[i], bulletplayerrow[i]);
                cout << '*';
                lvl2[bulletplayerrow[i]][bulletplayercol[i]] = '*';
            }
            else if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '/' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '{' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '\\' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '1')
            {
                health--;
                bulletplayerexist[i] = false;
            }
            else
            {
                bulletplayerexist[i] = false;
            }
        }
    }
}

void fireplayerb2(int &p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py)
{
    gotoxy(px - 1, py + 2);
    cout << '=';
    bulletplayerrow[p] = py + 2;
    bulletplayercol[p] = px - 1;
    bulletplayerexist[p] = true;

    // Ensure array bounds before updating thelvl2
    if (bulletplayerrow[p] >= 0 && bulletplayerrow[p] < 33 && bulletplayercol[p] >= 0 && bulletplayercol[p] < 190)
    {
        lvl2[bulletplayerrow[p]][bulletplayercol[p]] = '=';
    }

    p++;
}

void movebulletplayerb2(int p, int bulletplayerrow[], int bulletplayercol[], bool bulletplayerexist[], int px, int py, int &health)
{
    for (int i = 0; i < p; i++)
    {
        if (bulletplayerexist[i] == true && lvl2[bulletplayerrow[i]][bulletplayercol[i]] == '=')
        {
            gotoxy(bulletplayercol[i], bulletplayerrow[i]);
            cout << ' ';
            lvl2[bulletplayerrow[i]][bulletplayercol[i]] = ' ';
            bulletplayercol[i]--;
            if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == ' ')
            {
                gotoxy(bulletplayercol[i], bulletplayerrow[i]);
                cout << '=';
                lvl2[bulletplayerrow[i]][bulletplayercol[i]] = '=';
            }
            else if (getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '/' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '{' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '\\' || getCharAtxy(bulletplayercol[i], bulletplayerrow[i]) == '1')
            {
                health--;
                bulletplayerexist[i] = false;
            }
            else
            {
                bulletplayerexist[i] = false;
            }
        }
    }
}

void firetank2(int &noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty)
{
    gotoxy(tx + 6, ty + 3);
    cout << '*';
    bullettankrow[noo] = ty + 3;
    bullettankcol[noo] = tx + 6;
    bullettankexist[noo] = true;

    // Ensure array bounds before updating thelvl2
    if (bullettankrow[noo] >= 0 && bullettankrow[noo] < 33 && bullettankcol[noo] >= 0 && bullettankcol[noo] < 190)
    {
        lvl2[bullettankrow[noo]][bullettankcol[noo]] = '*';
    }

    noo++;
}

void movebullettank2(int noo, int bullettankrow[], int bullettankcol[], bool bullettankexist[], int tx, int ty, int &health)
{
    for (int i = 0; i < noo; i++)
    {
        if (bullettankexist[i] == true && lvl2[bullettankrow[i]][bullettankcol[i]] == '*')
        {
            gotoxy(bullettankcol[i], bullettankrow[i]);
            cout << ' ';
            lvl2[bullettankrow[i]][bullettankcol[i]] = ' ';
            bullettankrow[i]++;
            if (getCharAtxy(bullettankcol[i], bullettankrow[i]) == ' ')
            {
                gotoxy(bullettankcol[i], bullettankrow[i]);
                cout << '*';
                lvl2[bullettankrow[i]][bullettankcol[i]] = '*';
            }
            else if (getCharAtxy(bullettankcol[i], bullettankrow[i]) == '.' || getCharAtxy(bullettankcol[i], bullettankrow[i]) == '(' || getCharAtxy(bullettankcol[i], bullettankrow[i]) == ')' || getCharAtxy(bullettankcol[i], bullettankrow[i]) == '`')
            {
                health--;
                bullettankexist[i] = false;
            }
            else
            {
                bullettankexist[i] = false;
            }
        }
    }
}
void fireenemy2(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey)
{
    gotoxy(ex + 5, ey + 2);
    cout << ':';
    bulletenemyrow[n] = ey + 2;
    bulletenemycol[n] = ex + 5;
    bulletenemyexist[n] = true;

    // Ensure array bounds before updating thelvl2
    if (bulletenemyrow[n] >= 0 && bulletenemyrow[n] < 33 && bulletenemycol[n] >= 0 && bulletenemycol[n] < 190)
    {
        lvl2[bulletenemyrow[n]][bulletenemycol[n]] = ':';
    }

    n++;
}

void movebulletenemy2(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health)
{
    for (int i = 0; i < n; i++)
    {
        if (bulletenemyexist[i] == true && lvl2[bulletenemyrow[i]][bulletenemycol[i]] == ':')
        {
            gotoxy(bulletenemycol[i], bulletenemyrow[i]);
            cout << ' ';
            lvl2[bulletenemyrow[i]][bulletenemycol[i]] = ' ';
            bulletenemycol[i]++;
            if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ' ')
            {
                gotoxy(bulletenemycol[i], bulletenemyrow[i]);
                cout << ':';
                lvl2[bulletenemyrow[i]][bulletenemycol[i]] = ':';
            }
            else if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ',' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '.' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '(' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ')' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '`')
            {
                health--;
                bulletenemyexist[i] = false;
            }
            else
            {
                bulletenemyexist[i] = false;
            }
        }
    }
}
void fireenemyb2(int &n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey)
{
    gotoxy(ex - 1, ey + 2);
    cout << ';';
    bulletenemyrow[n] = ey + 2;
    bulletenemycol[n] = ex - 1;
    bulletenemyexist[n] = true;

    // Ensure array bounds before updating thelvl2
    if (bulletenemyrow[n] >= 0 && bulletenemyrow[n] < 33 && bulletenemycol[n] >= 0 && bulletenemycol[n] < 190)
    {
        lvl2[bulletenemyrow[n]][bulletenemycol[n]] = ';';
    }

    n++;
}

void movebulletenemyb2(int n, int bulletenemyrow[], int bulletenemycol[], bool bulletenemyexist[], int ex, int ey, int &health)
{
    for (int i = 0; i < n; i++)
    {
        if (bulletenemyexist[i] == true && lvl2[bulletenemyrow[i]][bulletenemycol[i]] == ';')
        {
            gotoxy(bulletenemycol[i], bulletenemyrow[i]);
            cout << ' ';
            lvl2[bulletenemyrow[i]][bulletenemycol[i]] = ' ';
            bulletenemycol[i]--;
            if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ' ')
            {
                gotoxy(bulletenemycol[i], bulletenemyrow[i]);
                cout << ';';
                lvl2[bulletenemyrow[i]][bulletenemycol[i]] = ';';
            }
            else if (getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ',' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '.' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '(' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == ')' || getCharAtxy(bulletenemycol[i], bulletenemyrow[i]) == '`')
            {
                health--;
                bulletenemyexist[i] = false;
            }
            else
            {
                bulletenemyexist[i] = false;
            }
        }
    }
}

void loose()
{
    system("cls");
    setColor(1);
    cout << R"(
        
                                                                                                            _..._                            
                                                                                      .---.              .-'_..._''.                         
/|              __.....__                             __.....__                       |   |            .' .'      '.\    .                   
||          .-''         '.                       .-''         '.                     |   |           / .'             .'|                   
||         /     .-''"'-.  `.      .|       .|   /     .-''"'-.  `. .-,.--.           |   |          . '             .'  |                   
||  __    /     /________\   \   .' |_    .' |_ /     /________\   \|  .-. |          |   |          | |            <    |                   
||/'__ '. |                  | .'     | .'     ||                  || |  | |          |   |   _    _ | |             |   | ____              
|:/`  '. '\    .-------------''--.  .-''--.  .-'\    .-------------'| |  | |          |   |  | '  / |. '             |   | \ .'              
||     | | \    '-.____...---.   |  |     |  |   \    '-.____...---.| |  '-           |   | .' | .' | \ '.          .|   |/  .               
||\    / '  `.             .'    |  |     |  |    `.             .' | |               |   | /  | /  |  '. `._____.-'/|    /\  \              
|/\'..' /     `''-...... -'      |  '.'   |  '.'    `''-...... -'   | |               '---'|   `'.  |    `-.______ / |   |  \  \             
'  `'-'`                         |   /    |   /                     |_|                    '   .'|  '/            `  '    \  \  \            
                                 `'-'     `'-'                                              `-'  `--'               '------'  '---'  )";
    setColor(8);
    cout << R"(        
   _..._         __.....__                                                .--. __  __   ___         __.....__                                
 .'     '.   .-''         '.                                              |__||  |/  `.'   `.   .-''         '.                              
.   .-.   . /     .-''"'-.  `.                     .|                 .|  .--.|   .-.  .-.   ' /     .-''"'-.  `.                            
|  '   '  |/     /________\   \ ____     _____   .' |_              .' |_ |  ||  |  |  |  |  |/     /________\   \                           
|  |   |  ||                  |`.   \  .'    / .'     |           .'     ||  ||  |  |  |  |  ||                  |                           
|  |   |  |\    .-------------'  `.  `'    .' '--.  .-'          '--.  .-'|  ||  |  |  |  |  |\    .-------------'                           
|  |   |  | \    '-.____...---.    '.    .'      |  |               |  |  |  ||  |  |  |  |  | \    '-.____...---.                           
|  |   |  |  `.             .'     .'     `.     |  |               |  |  |__||__|  |__|  |__|  `.             .'                            
|  |   |  |    `''-...... -'     .'  .'`.   `.   |  '.'             |  '.'                        `''-...... -'                              
|  |   |  |                    .'   /    `.   `. |   /              |   /                                                                    
'--'   '--'                   '----'       '----'`'-'               `'-'                                                                     

    )";
    cin.ignore();
}

void win()
{
    system("cls");
    setColor(1);
    cout << R"( 
                    .-'''-.                                                                          
                   '   _    \                  _______          _______                              
                 /   /` '.   \                 \  ___ `'.   .--.\  ___ `'.             .--.          
 .-.          .-.   |     \  '                  ' |--.\  \  |__| ' |--.\  \            |__|          
  \ \        / /|   '      |  '                 | |    \  ' .--. | |    \  '           .--.     .|   
   \ \      / / \    \     / /                  | |     |  '|  | | |     |  '          |  |   .' |_  
    \ \    / /   `.   ` ..' /_    _             | |     |  ||  | | |     |  |          |  | .'     | 
     \ \  / /       '-...-'`| '  / |            | |     ' .'|  | | |     ' .'          |  |'--.  .-' 
      \ `  /               .' | .' |            | |___.' /' |  | | |___.' /'           |  |   |  |   
       \  /                /  | /  |           /_______.'/  |__|/_______.'/            |__|   |  |   
       / /                |   `'.  |           \_______|/       \_______|/                    |  '.' 
   |`-' /                 '   .'|  '/                                                         |   /  
    '..'                   `-'  `--'                                                          `'-'   
                                            
)";
    setColor(7);
  cin.ignore();
}